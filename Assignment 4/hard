import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private static final int TOTAL_SEATS = 10;
    private int availableSeats = TOTAL_SEATS;
    private final Lock lock = new ReentrantLock();

    public void bookSeat(String customerType) {
        lock.lock();
        try {
            if (availableSeats > 0) {
                System.out.println(customerType + " booking a seat. Seats left: " + (availableSeats - 1));
                availableSeats--;
            } else {
                System.out.println("No seats available for " + customerType);
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final String customerType;

    public BookingThread(TicketBookingSystem bookingSystem, String customerType, int priority) {
        this.bookingSystem = bookingSystem;
        this.customerType = customerType;
        this.setPriority(priority);
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(customerType);
    }
}

public class TicketBooking {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem();

        // Create threads for VIP and regular customers
        Thread vip1 = new BookingThread(bookingSystem, "VIP Customer 1", Thread.MAX_PRIORITY);
        Thread vip2 = new BookingThread(bookingSystem, "VIP Customer 2", Thread.MAX_PRIORITY);
        Thread regular1 = new BookingThread(bookingSystem, "Regular Customer 1", Thread.NORM_PRIORITY);
        Thread regular2 = new BookingThread(bookingSystem, "Regular Customer 2", Thread.NORM_PRIORITY);
        Thread regular3 = new BookingThread(bookingSystem, "Regular Customer 3", Thread.NORM_PRIORITY);

        // Start the threads
        vip1.start();
        vip2.start();
        regular1.start();
        regular2.start();
        regular3.start();

        // Wait for all threads to finish
        try {
            vip1.join();
            vip2.join();
            regular1.join();
            regular2.join();
            regular3.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
